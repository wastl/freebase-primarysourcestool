FIND_PATH( LIBCPPDB_INCLUDE_DIR cppdb/frontend.h)
FIND_LIBRARY( LIBCPPDB_LIBRARY NAMES cppdb)
FIND_LIBRARY(CPPDB_POSTGRES_BACKEND NAMES cppdb_postgresql)
FIND_LIBRARY(CPPDB_MYSQL_BACKEND NAMES cppdb_mysql)
FIND_LIBRARY(CPPDB_SQLITE_BACKEND NAMES cppdb_sqlite3)


IF( LIBCPPDB_INCLUDE_DIR AND LIBCPPDB_LIBRARY )
   SET( LIBCPPDB_FOUND TRUE )
ENDIF( LIBCPPDB_INCLUDE_DIR AND LIBCPPDB_LIBRARY )

IF( LIBCPPDB_FOUND )
   IF( NOT CPPDB_FIND_QUIETLY )
      MESSAGE( STATUS "Found libcppdb: ${LIBCPPDB_LIBRARY}" )

      IF( CPPDB_POSTGRES_BACKEND)
         MESSAGE( STATUS "Found libcppdb PostgreSQL backend: ${CPPDB_POSTGRES_BACKEND}" )
      ENDIF( CPPDB_POSTGRES_BACKEND)

      IF( CPPDB_MYSQL_BACKEND)
         MESSAGE( STATUS "Found libcppdb MySQL backend: ${CPPDB_MYSQL_BACKEND}" )
      ENDIF( CPPDB_MYSQL_BACKEND)

      IF( CPPDB_SQLITE_BACKEND)
         MESSAGE( STATUS "Found libcppdb Sqlite3 backend: ${CPPDB_SQLITE_BACKEND}" )
      ENDIF( CPPDB_SQLITE_BACKEND)

   ENDIF( NOT CPPDB_FIND_QUIETLY )
ELSE( LIBCPPDB_FOUND )
   IF( CPPDB_FIND_REQUIRED )
      MESSAGE( FATAL_ERROR "Could not find libcppdb" )
   ENDIF( CPPDB_FIND_REQUIRED )
ENDIF( LIBCPPDB_FOUND )

IF ( NOT CPPDB_POSTGRES_BACKEND AND NOT CPPDB_MYSQL_BACKEND AND NOT CPPDB_SQLITE_BACKEND )
      MESSAGE( FATAL_ERROR "Could not find any libcppdb backend" )
ENDIF ( NOT CPPDB_POSTGRES_BACKEND AND NOT CPPDB_MYSQL_BACKEND AND NOT CPPDB_SQLITE_BACKEND )